#functions read into .zshrc
function gitstat {
    local name st color action gitdir

    if [[ "$PWD" =~ '/\.git(/.*)?$' ]]; then
        return
    fi
    name=`git rev-parse --abbrev-ref=loose HEAD 2> /dev/null`
    if [[ -z $name ]]; then
        return
    fi
    gitdir=`git rev-parse --git-dir 2> /dev/null`
    st=`git status 2> /dev/null`
    if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
        color=${SOLARIZED[green]}
    elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
        color=${SOLARIZED[yellow]}
    elif [[ -n `echo "$st" | grep "^Untracked"` ]]; then
        color=${SOLARIZED[blue]}
    else
        color=${SOLARIZED[red]}
    fi
    printf '"'$name:$color'"'
}

function zman() {
    PAGER="less -g -s '+/^       "$1"'" man zshall
}

function addopt() {
    opt=${@:?"Specify the opt"}
    if [ -f $ZDOTDIR/zshopts ];then
        echo "${opt}" >> $ZDOTDIR/zshopts
    fi
}

function chpwd () {
    if [ "$NOSTACK" != "1" -a "$DIRSTACK[$DIRPOINT]" != "$PWD" ];then
        DIRSTACK=( $(for (( i=1; i<=$DIRPOINT; ++i ));do; printf "$DIRSTACK[i] ";done) "$PWD" )
        DIRPOINT=$#DIRSTACK
    else
        return 0;
    fi
    local abbr=4
    cmd='CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command ls -ACFG $(ls --color&>/dev/null&&printf "--color")'
    lines=$( eval $cmd | grep -c "" )
    if [ ${lines:-0} -gt $(($abbr*2)) ]; then
        eval $cmd | head -n $abbr
        echo
        for i in {1..$(( ($COLUMNS - 28) / 2  ))};do printf " ";done
        printf "~~ Not Showing %4d lines ~~\n" $(($lines - $abbr*2))
        echo
        eval $cmd | tail -n $abbr
    else
        eval $cmd
    fi
}

function byte2size () {
    byte=$1
    fsize=""
    suffix=""
    if [ $byte -ge $((1024**4)) ]; then
        fsize=`echo "scale=1;${byte}/$((1024**4))"|bc`
        suffix="TB"
    elif [ $byte -ge $((1024**3)) ]; then
        fsize=`echo "scale=1;${byte}/$((1024**3))"|bc`
        suffix="GB"	
    elif [ $byte -ge $((1024**2)) ]; then
        fsize=`echo "scale=1;${byte}/$((1024**2))"|bc`
        suffix="MB"
    elif [ $byte -ge 1024 ]; then
        fsize=`echo "scale=1;${byte}/1024"|bc`
        suffix="KB"	
    else
        fsize=$byte
        suffix="B"
    fi
    echo $fsize$suffix
}

function agvim () {
    IFSTMP=$IFS
    IFS=$'\n'
    buffer=($(ag ${@} | peco --query "$LBUFFER"))
    IFS=$IFSTMP
    filename=$(echo $buffer | awk -F : '{print $1}')
    linenum=$(echo $buffer | awk -F : '{print $2}')
    [ "$buffer" != "" ] && vim -c $linenum $filename
}

function _peco-hist () {
    if which tac >/dev/null 2>&1;then
        rev="tac"
    else
        rev="tail -r"
    fi
    tmpbuf=$(history -n 1 | eval $rev | peco --query="$LBUFFER" --prompt="HISTSEARCH>")
    BUFFER=${tmpbuf:-$BUFFER}
    CURSOR=$#BUFFER
    zle -c -r
}
zle -N _peco-hist

function _dir-back () {
    if [ $DIRPOINT -gt 1 ]; then
        DIRPOINT=$(( DIRPOINT - 1 ))
        NOSTACK=1 cd $DIRSTACK[$DIRPOINT]
        zle reset-prompt
    else
        zle -M "Can not go further"
    fi
}
zle -N _dir-back

function _dir-forward () {
    if [ $DIRPOINT -lt $#DIRSTACK ]; then
        DIRPOINT=$(( DIRPOINT + 1 ))
        NOSTACK=1 cd $DIRSTACK[$DIRPOINT]
        zle reset-prompt
    else
        zle -M "Can not go further"
    fi
}
zle -N _dir-forward

function _dir-showstack () {
    tmppoint=$(for (( i=1; i <= $#DIRSTACK; ++i ));do echo "$i ${DIRSTACK[$i]}"; done | peco --prompt="DIRSTACK>" --initial-index=$((DIRPOINT-1)) | awk '{print $1}')
    if [ "$tmppoint" != "" -a "$tmppoint" != $DIRPOINT ]; then
        DIRPOINT=$tmppoint 
        NOSTACK=1 cd $DIRSTACK[$DIRPOINT]
        zle reset-prompt
    fi
}
zle -N _dir-showstack

function pwdarray () {
    local pwdarray curpath itr ATTR
    [ "$1" = "-a" ]&&ATTR=true||ATTR=false
    pwdarray=( $(echo -n $PWD | tr ' ' ':' | tr '/' ' ') )
    pwdarray[1]=/$pwdarray[1]
    for dir in $pwdarray; do
        itr=$((itr+1))
        pwdarray[$itr]=$(printf "$dir"|tr ':' ' ')
        curpath=$curpath$dir/
        $ATTR&&[ -e "${curpath}.git" ]&&pwdarray[$itr]="$pwdarray[$itr]:g:$SOLARIZED[green]"
    done
    $ATTR&&pwdarray[$#pwdarray]="$pwdarray[$#pwdarray]:$SOLARIZED[blue]"
    for dir in $pwdarray; do
        printf '"'$dir'" '
    done
}

function powliner () {
    local bgc prc disp data attrs item attr git_flag esc_flag
    [ "$1" = "-e" ]&&esc_flag=true&&shift||esc_flag=false
    data=( $@ )
    if $POWERLINE;then
        for item in $data;do
            bgc=$SOLARIZED[base01]
            dirname=$(echo -n "$item" | sed -e "s/\"//g" | sed -e "s/:.*//")
            attrs=( $(echo -n "$item" | tr ":" ' ' | tr "\"" ' ' ))
            attrs=( $attrs[2,-1] )
            for attr in $attrs;do
                [ "$attr" = "g" ]&&dirname="$dirname \ue0a0"
                [ "$(echo $attr|grep -o -E '^[0-9]+$')" != "" ]&&bgc=$(echo $attr|grep -o -E '^[0-9]+$')
            done
            if [ "$prc" != "" ];then
                if $esc_flag;then
                    [ "$prc" = "$bgc" ]&&disp="$disp\ue0b1"||disp="$disp%{\e[48;5;${bgc};38;5;${prc}m%}\ue0b0"
                else
                    [ "$prc" = "$bgc" ]&&disp="$disp\ue0b1"||disp="$disp\e[48;5;${bgc};38;5;${prc}m\ue0b0"
                fi
            fi 
            if $esc_flag; then
                disp="$disp%{\e[48;5;$bgc;38;5;$SOLARIZED[base3]m%}$dirname "
            else
                disp="$disp\e[48;5;$bgc;38;5;$SOLARIZED[base3]m$dirname "
            fi
            prc=$bgc
        done
        if $esc_flag; then
            disp="$disp%{\e[38;5;${prc};48;5;$SOLARIZED[base03]m%}\ue0b0"
            disp="$disp%{\e[m%}"
        else
            disp="$disp\e[38;5;${prc};48;5;$SOLARIZED[base03]m\ue0b0"
            disp="$disp\e[m"
        fi
        echo -n $disp
    else
        for item in $data;do
            dirname=$(echo -n "$item" | sed -e "s/\"//g" | sed -e "s/:.*//")
            attrs=( $(echo -n "$item" | tr ":" ' ' | tr "\"" ' ' ))
            attrs=( $attrs[2,-1] )
            for attr in $attrs;do
                [ "$attr" = "g" ]&&dirname="$dirname<g>"
                if $esc_flag;then
                    [ "$(echo $attr|grep -o -E '^[0-9]+$')" != "" ]&&bgc="%{\e[3$(echo $attr|grep -o -E '^[0-9]+$')m%}"
                else
                    [ "$(echo $attr|grep -o -E '^[0-9]+$')" != "" ]&&bgc="\e[3$(echo $attr|grep -o -E '^[0-9]+$')m"
                fi
            done
            if $esc_flag; then
                disp="$disp$bgc$dirname%{\e[m%} )"
            else
                disp="$disp$bgc$dirname\e[m )"
            fi
        done
        echo -n $disp
    fi
}

function powlinel () {
    local bgc prc disp data attrs item attr git_flag esc_flag
    [ "$1" = "-e" ]&&esc_flag=true&&shift||esc_flag=false
    data=( $@ )
    if $POWERLINE;then
        prc=$SOLARIZED[base03]
        for item in $data;do
            bgc=$SOLARIZED[base01]
            dirname=$(echo -n "$item" | sed -e "s/\"//g" | sed -e "s/:.*//")
            attrs=( $(echo -n "$item" | tr ":" ' ' | tr "\"" ' ' ))
            attrs=( $attrs[2,-1] )
            for attr in $attrs;do
                [ "$attr" = "g" ]&&dirname="$dirname \ue0a0"
                [ "$(echo $attr|grep -o -E '^[0-9]+$')" != "" ]&&bgc=$(echo $attr|grep -o -E '^[0-9]+$')
            done
            if [ "$prc" != "" ];then
                if $esc_flag; then
                    [ "$prc" = "$bgc" ]&&disp="$disp\ue0b3"||disp="$disp%{\e[38;5;${bgc};48;5;${prc}m%}\ue0b2"
                else
                    [ "$prc" = "$bgc" ]&&disp="$disp\ue0b3"||disp="$disp\e[38;5;${bgc};48;5;${prc}m\ue0b2"
                fi
            fi 
            if $esc_flag; then
                disp="$disp%{\e[48;5;$bgc;38;5;$SOLARIZED[base3]m%}$dirname %{\e[m%}"
            else
                disp="$disp\e[48;5;$bgc;38;5;$SOLARIZED[base3]m$dirname \e[m"
            fi
            prc=$bgc
        done
        echo -n $disp
    else
        for item in $data;do
            dirname=$(echo -n "$item" | sed -e "s/\"//g" | sed -e "s/:.*//")
            attrs=( $(printf "$item" | tr ":" ' ' | tr "\"" ' ' ))
            attrs=( $attrs[2,-1] )
            for attr in $attrs;do
                [ "$attr" = "g" ]&&dirname="$dirname<g>"
                if $esc_flag;then
                    [ "$(echo $attr|grep -o -E '^[0-9]+$')" != "" ]&&bgc="%{\e[3$(echo $attr|grep -o -E '^[0-9]+$')m%}"
                else
                    [ "$(echo $attr|grep -o -E '^[0-9]+$')" != "" ]&&bgc="\e[3$(echo $attr|grep -o -E '^[0-9]+$')m"
                fi
            done
            if $esc_flag; then
                disp="$disp ($bgc$dirname%{\e[m%}"
            else
                disp="$disp ($bgc$dirname\e[0m"
            fi
        done
        echo -n $disp
    fi
}

function trashEmptyDirectory () {
    OLDIFS=$IFS
    IFS=$'\n'
    folders=( $(find $PWD -maxdepth 1 -type d) )
    for folder in $folders; do
        [ -z "$(ls -A ${folder})" ]&& rmdir "${folder}"
    done
    IFS=$OLDIFS
}
